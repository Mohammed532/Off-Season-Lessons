/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick; 
import edu.wpi.first.wpilibj.Spark; 
import edu.wpi.first.wpilibj.TimedRobot; 
import edu.wpi.first.wpilibj.Timer; 
import edu.wpi.first.wpilibj.drive.DifferentialDrive; 
import edu.wpi.first.wpilibj.Solenoid;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends IterativeRobot {

    private final Spark motor1 = new Spark(0); //Creates a new Spark(motor controller) object. Takes in a parameter of the PWM address(I'll explain in robotics)
    private final Spark motor2 = new Spark(1); //Same as above
    private final DifferentialDrive m_robotDrive
        = new DifferentialDrive(motor1, motor2);
    private final Joystick m_stick = new Joystick(0); //Creates joystick object, which takes input from the joystick. Takes the computer port it is connected to as a parameter.
    private final Timer m_timer = new Timer(); //Creates timer object. Used to count seconds passed by
    private final Solenoid Air1 = new Solenoid(0);
///////////////////////////////////////////////////////////////////

//////////////////////////////////////////VARIBLES/////////////////////////////

    /*
        You can also code varibles in here.
    */

    double speedInM = 50.4;
    int feetFromWall = 10;
    boolean scorePoint = false;
    
////////////////////////////////////////////////////////////////////////////////


  
    @Override
    public void robotInit() {
          /**
            * This function is run when the robot is first started up and should be
            * used for any initialization code.
            */
    }

    
    @Override
    public void autonomousInit() {
        /**
        * This function is run once each time the robot enters autonomous mode.
        */

        m_timer.reset(); //Resets timer to zero
        m_timer.start(); //Starts the timer
    }

  
    @Override
    public void autonomousPeriodic() {
        /**
        * This function is called periodically during autonomous.
        */

        // Drive for 2 seconds
        if (m_timer.get() < 2.0) { //If the timer is less than 2 seconds
        m_robotDrive.arcadeDrive(0.5, 0.0); // drive forwards half speed
        } else { //If timer reaches 2 seconds
        m_robotDrive.stopMotor(); // stop robot
        }
        //arcadeDrive takes two parameters: first is speed, with 1.0 being full speed forward, 0.5 half, 0.0 full stop.
        //It also goes in the other direction, with -1.0 full speed BACKWARD, and so on.
        //The second parameter is how far it turns. 1.0 is turn right with full speed, 0.5 with half speed, 0.0 don't turn.
        //-1.0 is turn left full speed, and so on.
    }

    
    @Override
    public void teleopInit() {
        /**
        * This function is called once each time the robot enters teleoperated mode.
        */
    }

    /**
    * This function is called periodically during teleoperated mode.
    */
    @Override
    public void teleopPeriodic() {
        m_robotDrive.arcadeDrive(m_stick.getY(), m_stick.getX());
        //m_stick is the joystick object. getY() gets the Y axis value of the stick, which ranges from -1.0 to 1.0, and assigns
        //it to the forward/backward speed (Going fully forward will make it go full speed, Going back vice versa)
        //getX gets the X axis value of the stick, which also ranges from -1.0 to 1.0, and assigns it to the turning speed
        //(Going fully right will make it turn right full speed, vice versa)
    }

   
    @Override
    public void test0Periodic() {
        /**
        * This function is called periodically during test mode.
        */
    }
}
Â©   
  /**
   * This function is run when the robot is first started up and should be
   * used for any initialization code.
   */
  @Override
  public void robotInit() {

  }

  /**
   * This function is called every robot packet, no matter the mode. Use
   * this for items like diagnostics that you want ran during disabled,
   * autonomous, teleoperated and test.
   *
   * <p>This runs after the mode specific periodic functions, but before
   * LiveWindow and SmartDashboard integrated updating.
   */
  @Override
  public void robotPeriodic() {
  }

  /**
   * This autonomous (along with the chooser code above) shows how to select
   * between different autonomous modes using the dashboard. The sendable
   * chooser code works with the Java SmartDashboard. If you prefer the
   * LabVIEW Dashboard, remove all of the chooser code and uncomment the
   * getString line to get the auto name from the text box below the Gyro
   *
   * <p>You can add additional auto modes by adding additional comparisons to
   * the switch structure below with additional strings. If using the
   * SendableChooser make sure to add them to the chooser code above as well.
   */
  @Override
  public void autonomousInit() {
  }

  /**
   * This function is called periodically during autonomous.
   */
  @Override
  public void autonomousPeriodic() {

  }

  @Override
  public void teleopInit(){

  }

  /**
   * This function is called periodically during operator control.
   */
  @Override
  public void teleopPeriodic() {

    if(m_timer < 10){
      
    }
  }

  /**
   * This function is called periodically during test mode.
   */
  @Override
  public void testPeriodic() {
  }

}

